{"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.9"}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"markdown","source":"### Import libraries","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport keras \nfrom keras.layers import Dense\nimport json \nimport re\nimport string\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport unicodedata\nfrom sklearn.model_selection import train_test_split","metadata":{},"execution_count":1,"outputs":[{"name":"stdout","output_type":"stream","text":"WARNING:tensorflow:From D:\\programs\\anaconda\\lib\\site-packages\\keras\\src\\losses.py:2976: The name tf.losses.sparse_softmax_cross_entropy is deprecated. Please use tf.compat.v1.losses.sparse_softmax_cross_entropy instead.\n\n\n"}]},{"cell_type":"markdown","source":"### Load Dataset","metadata":{}},{"cell_type":"code","source":"question  =[]\nanswer = []\nwith open(\"dialogs.txt\",'r') as f :\n    for line in f :\n        line  =  line.split('\\t')\n        question.append(line[0])\n        answer.append(line[1])\nprint(len(question) == len(answer))","metadata":{},"execution_count":2,"outputs":[{"name":"stdout","output_type":"stream","text":"True\n"}]},{"cell_type":"code","source":"question[:5]","metadata":{},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":["['hi, how are you doing?',\n"," \"i'm fine. how about yourself?\",\n"," \"i'm pretty good. thanks for asking.\",\n"," 'no problem. so how have you been?',\n"," \"i've been great. what about you?\"]"]},"metadata":{}}]},{"cell_type":"code","source":"answer[:5]","metadata":{},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":["[\"i'm fine. how about yourself?\\n\",\n"," \"i'm pretty good. thanks for asking.\\n\",\n"," 'no problem. so how have you been?\\n',\n"," \"i've been great. what about you?\\n\",\n"," \"i've been good. i'm in school right now.\\n\"]"]},"metadata":{}}]},{"cell_type":"markdown","source":"### Data Cleaning","metadata":{}},{"cell_type":"code","source":"answer = [ i.replace(\"\\n\",\"\") for i in answer]","metadata":{},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"answer[:5]","metadata":{},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":["[\"i'm fine. how about yourself?\",\n"," \"i'm pretty good. thanks for asking.\",\n"," 'no problem. so how have you been?',\n"," \"i've been great. what about you?\",\n"," \"i've been good. i'm in school right now.\"]"]},"metadata":{}}]},{"cell_type":"code","source":"data = pd.DataFrame({\"question\" : question ,\"answer\":answer})\ndata.head()","metadata":{},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question</th>\n","      <th>answer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>hi, how are you doing?</td>\n","      <td>i'm fine. how about yourself?</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>i'm fine. how about yourself?</td>\n","      <td>i'm pretty good. thanks for asking.</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>i'm pretty good. thanks for asking.</td>\n","      <td>no problem. so how have you been?</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>no problem. so how have you been?</td>\n","      <td>i've been great. what about you?</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>i've been great. what about you?</td>\n","      <td>i've been good. i'm in school right now.</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                              question  \\\n","0               hi, how are you doing?   \n","1        i'm fine. how about yourself?   \n","2  i'm pretty good. thanks for asking.   \n","3    no problem. so how have you been?   \n","4     i've been great. what about you?   \n","\n","                                     answer  \n","0             i'm fine. how about yourself?  \n","1       i'm pretty good. thanks for asking.  \n","2         no problem. so how have you been?  \n","3          i've been great. what about you?  \n","4  i've been good. i'm in school right now.  "]},"metadata":{}}]},{"cell_type":"code","source":"def unicode_to_ascii(s):\n    return ''.join(c for c in unicodedata.normalize('NFD', s)\n      if unicodedata.category(c) != 'Mn')","metadata":{},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"def clean_text(text):\n    text = unicode_to_ascii(text.lower().strip())\n    text = re.sub(r\"i'm\", \"i am\", text)\n    text = re.sub(r\"\\r\", \"\", text)\n    text = re.sub(r\"he's\", \"he is\", text)\n    text = re.sub(r\"she's\", \"she is\", text)\n    text = re.sub(r\"it's\", \"it is\", text)\n    text = re.sub(r\"that's\", \"that is\", text)\n    text = re.sub(r\"what's\", \"that is\", text)\n    text = re.sub(r\"where's\", \"where is\", text)\n    text = re.sub(r\"how's\", \"how is\", text)\n    text = re.sub(r\"\\'ll\", \" will\", text)\n    text = re.sub(r\"\\'ve\", \" have\", text)\n    text = re.sub(r\"\\'re\", \" are\", text)\n    text = re.sub(r\"\\'d\", \" would\", text)\n    text = re.sub(r\"\\'re\", \" are\", text)\n    text = re.sub(r\"won't\", \"will not\", text)\n    text = re.sub(r\"can't\", \"cannot\", text)\n    text = re.sub(r\"n't\", \" not\", text)\n    text = re.sub(r\"n'\", \"ng\", text)\n    text = re.sub(r\"'bout\", \"about\", text)\n    text = re.sub(r\"'til\", \"until\", text)\n    text = re.sub(r\"[-()\\\"#/@;:<>{}`+=~|.!?,]\", \"\", text)\n    text = text.translate(str.maketrans('', '', string.punctuation)) \n    text = re.sub(\"(\\\\W)\",\" \",text) \n    text = re.sub('\\S*\\d\\S*\\s*','', text)\n    text =  \"<sos> \" +  text + \" <eos>\"\n    return text","metadata":{},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"data[\"question\"][0]","metadata":{},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":["'hi, how are you doing?'"]},"metadata":{}}]},{"cell_type":"code","source":"data[\"question\"] = data.question.apply(clean_text)\ndata[\"question\"][0]","metadata":{},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":["'<sos> hi how are you doing <eos>'"]},"metadata":{}}]},{"cell_type":"code","source":"data[\"answer\"] = data.answer.apply(clean_text)","metadata":{},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"question  = data.question.values.tolist()\nanswer =  data.answer.values.tolist()","metadata":{},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"### NLP","metadata":{}},{"cell_type":"code","source":"# Tokenize the cleaned questions and answers\ndef tokenize(lang):\n    lang_tokenizer = tf.keras.preprocessing.text.Tokenizer(\n      filters='')\n    lang_tokenizer.fit_on_texts(lang)\n    tensor = lang_tokenizer.texts_to_sequences(lang)\n\n    tensor = tf.keras.preprocessing.sequence.pad_sequences(tensor,\n                                                         padding='post')\n\n    return tensor, lang_tokenizer","metadata":{},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"input_tensor , inp_lang  =  tokenize(question)","metadata":{},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"target_tensor , targ_lang  =  tokenize(answer)","metadata":{},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"def remove_tags(sentence):\n    return sentence.split(\"<start>\")[-1].split(\"<end>\")[0]","metadata":{},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"max_length_targ, max_length_inp = target_tensor.shape[1], input_tensor.shape[1]","metadata":{},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"# Creating training and validation sets using an 80-20 split\ninput_tensor_train, input_tensor_val, target_tensor_train, target_tensor_val = train_test_split(input_tensor, target_tensor, test_size=0.2)","metadata":{},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Model","metadata":{},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"BUFFER_SIZE = len(input_tensor_train)\nBATCH_SIZE = 64\nsteps_per_epoch = len(input_tensor_train)//BATCH_SIZE\nembedding_dim = 256\nunits = 1024\nvocab_inp_size = len(inp_lang.word_index)+1\nvocab_tar_size = len(targ_lang.word_index)+1\n\ndataset = tf.data.Dataset.from_tensor_slices((input_tensor_train, target_tensor_train)).shuffle(BUFFER_SIZE)\ndataset = dataset.batch(BATCH_SIZE, drop_remainder=True)\n\nexample_input_batch, example_target_batch = next(iter(dataset))\nexample_input_batch.shape, example_target_batch.shape","metadata":{},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":["(TensorShape([64, 22]), TensorShape([64, 22]))"]},"metadata":{}}]},{"cell_type":"code","source":"class Encoder(tf.keras.Model):\n    def __init__(self, vocab_size, embedding_dim, enc_units, batch_sz):\n        super(Encoder, self).__init__()\n        self.batch_sz = batch_sz\n        self.enc_units = enc_units\n        self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)\n        self.gru = tf.keras.layers.GRU(self.enc_units,\n                                       return_sequences=True,\n                                       return_state=True,\n                                       recurrent_initializer='glorot_uniform')\n\n    def call(self, x,hidden):\n        x = self.embedding(x)\n        output, state = self.gru(x, initial_state = hidden)\n        return output, state\n    \n    def initialize_hidden_state(self):\n        return tf.zeros((self.batch_sz, self.enc_units))\n","metadata":{},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"encoder = Encoder(vocab_inp_size, embedding_dim, units, BATCH_SIZE)\n\n# sample input\nsample_hidden = encoder.initialize_hidden_state()\nsample_output, sample_hidden = encoder(example_input_batch, sample_hidden)\nprint ('Encoder output shape: (batch size, sequence length, units) {}'.format(sample_output.shape))\nprint ('Encoder Hidden state shape: (batch size, units) {}'.format(sample_hidden.shape))","metadata":{},"execution_count":23,"outputs":[{"name":"stdout","output_type":"stream","text":"WARNING:tensorflow:From D:\\programs\\anaconda\\lib\\site-packages\\keras\\src\\backend.py:873: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n\n\n\nEncoder output shape: (batch size, sequence length, units) (64, 22, 1024)\n\nEncoder Hidden state shape: (batch size, units) (64, 1024)\n"}]},{"cell_type":"code","source":"class BahdanauAttention(tf.keras.layers.Layer):\n    def __init__(self, units):\n        super(BahdanauAttention, self).__init__()\n        self.W1 = tf.keras.layers.Dense(units)\n        self.W2 = tf.keras.layers.Dense(units)\n        self.V = tf.keras.layers.Dense(1)\n\n    def call(self, query, values):\n        # query hidden state shape == (batch_size, hidden size)\n        # query_with_time_axis shape == (batch_size, 1, hidden size)\n        # values shape == (batch_size, max_len, hidden size)\n        # we are doing this to broadcast addition along the time axis to calculate the score\n        query_with_time_axis = tf.expand_dims(query, 1)\n\n        # score shape == (batch_size, max_length, 1)\n        # we get 1 at the last axis because we are applying score to self.V\n        # the shape of the tensor before applying self.V is (batch_size, max_length, units)\n        score = self.V(tf.nn.tanh(\n            self.W1(query_with_time_axis) + self.W2(values)))\n\n        # attention_weights shape == (batch_size, max_length, 1)\n        attention_weights = tf.nn.softmax(score, axis=1)\n\n        # context_vector shape after sum == (batch_size, hidden_size)\n        context_vector = attention_weights * values\n        context_vector = tf.reduce_sum(context_vector, axis=1)\n\n        return context_vector, attention_weights","metadata":{},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"attention_layer = BahdanauAttention(10)\nattention_result, attention_weights = attention_layer(sample_hidden, sample_output)\n\nprint(\"Attention result shape: (batch size, units) {}\".format(attention_result.shape))\nprint(\"Attention weights shape: (batch_size, sequence_length, 1) {}\".format(attention_weights.shape))","metadata":{},"execution_count":25,"outputs":[{"name":"stdout","output_type":"stream","text":"Attention result shape: (batch size, units) (64, 1024)\n\nAttention weights shape: (batch_size, sequence_length, 1) (64, 22, 1)\n"}]},{"cell_type":"code","source":"class Decoder(tf.keras.Model):\n    def __init__(self, vocab_size, embedding_dim, dec_units, batch_sz):\n        super(Decoder, self).__init__()\n        self.batch_sz = batch_sz\n        self.dec_units = dec_units\n        self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)\n        self.gru = tf.keras.layers.GRU(self.dec_units,\n                                       return_sequences=True,\n                                       return_state=True,\n                                       recurrent_initializer='glorot_uniform')\n        self.fc = tf.keras.layers.Dense(vocab_size)\n\n        # used for attention\n        self.attention = BahdanauAttention(self.dec_units)\n\n    def call(self, x, hidden, enc_output):\n        # enc_output shape == (batch_size, max_length, hidden_size)\n        context_vector, attention_weights = self.attention(hidden, enc_output)\n\n        # x shape after passing through embedding == (batch_size, 1, embedding_dim)\n        x = self.embedding(x)\n\n        # x shape after concatenation == (batch_size, 1, embedding_dim + hidden_size)\n        x = tf.concat([tf.expand_dims(context_vector, 1), x], axis=-1)\n\n        # passing the concatenated vector to the GRU\n        output, state = self.gru(x)\n\n        # output shape == (batch_size * 1, hidden_size)\n        output = tf.reshape(output, (-1, output.shape[2]))\n\n        # output shape == (batch_size, vocab)\n        x = self.fc(output)\n\n        return x, state, attention_weights","metadata":{},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"decoder = Decoder(vocab_tar_size, embedding_dim, units, BATCH_SIZE)\n\nsample_decoder_output, _, _ = decoder(tf.random.uniform((BATCH_SIZE, 1)),\n                                      sample_hidden, sample_output)\n\nprint ('Decoder output shape: (batch_size, vocab size) {}'.format(sample_decoder_output.shape))","metadata":{},"execution_count":27,"outputs":[{"name":"stdout","output_type":"stream","text":"Decoder output shape: (batch_size, vocab size) (64, 2357)\n"}]},{"cell_type":"code","source":"optimizer = tf.keras.optimizers.Adam()\nloss_object = tf.keras.losses.SparseCategoricalCrossentropy(\n    from_logits=True, reduction='none')\n\ndef loss_function(real, pred):\n    mask = tf.math.logical_not(tf.math.equal(real, 0))\n    loss_ = loss_object(real, pred)\n\n    mask = tf.cast(mask, dtype=loss_.dtype)\n    loss_ *= mask\n\n    return tf.reduce_mean(loss_)","metadata":{},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"@tf.function\ndef train_step(inp, targ, enc_hidden):\n    loss = 0\n\n    with tf.GradientTape() as tape:\n        enc_output, enc_hidden = encoder(inp, enc_hidden)\n\n        dec_hidden = enc_hidden\n\n        dec_input = tf.expand_dims([targ_lang.word_index['<sos>']] * BATCH_SIZE, 1)\n\n        # Teacher forcing - feeding the target as the next input\n        for t in range(1, targ.shape[1]):\n            # passing enc_output to the decoder\n            predictions, dec_hidden, _ = decoder(dec_input, dec_hidden, enc_output)\n\n            loss += loss_function(targ[:, t], predictions)\n\n            # using teacher forcing\n            dec_input = tf.expand_dims(targ[:, t], 1)\n\n    batch_loss = (loss / int(targ.shape[1]))\n\n    variables = encoder.trainable_variables + decoder.trainable_variables\n\n    gradients = tape.gradient(loss, variables)\n\n    optimizer.apply_gradients(zip(gradients, variables))\n\n    return batch_loss","metadata":{},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"EPOCHS = 40\n\nfor epoch in range(1, EPOCHS + 1):\n    enc_hidden = encoder.initialize_hidden_state()\n    total_loss = 0\n\n    for (batch, (inp, targ)) in enumerate(dataset.take(steps_per_epoch)):\n        batch_loss = train_step(inp, targ, enc_hidden)\n        total_loss += batch_loss\n\n    if(epoch % 4 == 0):\n        print('Epoch:{:3d} Loss:{:.4f}'.format(epoch,\n                                          total_loss / steps_per_epoch))","metadata":{},"execution_count":30,"outputs":[{"name":"stdout","output_type":"stream","text":"Epoch:  4 Loss:1.5696\n\nEpoch:  8 Loss:1.3316\n\nEpoch: 12 Loss:1.1541\n\nEpoch: 16 Loss:0.9990\n\nEpoch: 20 Loss:0.8427\n\nEpoch: 24 Loss:0.6705\n\nEpoch: 28 Loss:0.4888\n\nEpoch: 32 Loss:0.3100\n\nEpoch: 36 Loss:0.1583\n\nEpoch: 40 Loss:0.0736\n"}]},{"cell_type":"code","source":"def evaluate(sentence):\n    sentence = clean_text(sentence)\n\n    inputs = [inp_lang.word_index[i] for i in sentence.split(' ')]\n    inputs = tf.keras.preprocessing.sequence.pad_sequences([inputs],\n                                                         maxlen=max_length_inp,\n                                                         padding='post')\n    inputs = tf.convert_to_tensor(inputs)\n\n    result = ''\n\n    hidden = [tf.zeros((1, units))]\n    enc_out, enc_hidden = encoder(inputs, hidden)\n\n    dec_hidden = enc_hidden\n    dec_input = tf.expand_dims([targ_lang.word_index['<sos>']], 0)\n\n    for t in range(max_length_targ):\n        predictions, dec_hidden, attention_weights = decoder(dec_input,\n                                                             dec_hidden,\n                                                             enc_out)\n\n        # storing the attention weights to plot later on\n        attention_weights = tf.reshape(attention_weights, (-1, ))\n\n        predicted_id = tf.argmax(predictions[0]).numpy()\n\n        result += targ_lang.index_word[predicted_id] + ' '\n\n        if targ_lang.index_word[predicted_id] == '<eos>':\n            return remove_tags(result), remove_tags(sentence)\n\n        # the predicted ID is fed back into the model\n        dec_input = tf.expand_dims([predicted_id], 0)\n\n    return remove_tags(result), remove_tags(sentence)","metadata":{},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"questions  =[]\nanswers = []\nwith open(\"dialogs.txt\",'r') as f :\n    for line in f :\n        line  =  line.split('\\t')\n        questions.append(line[0])\n        answers.append(line[1])\nprint(len(question) == len(answer))","metadata":{},"execution_count":32,"outputs":[{"name":"stdout","output_type":"stream","text":"True\n"}]},{"cell_type":"code","source":"def ask(sentence):\n    result, sentence = evaluate(sentence)\n\n    print('Question: %s' % (sentence))\n    print('Predicted answer: {}'.format(result))\nask(questions[100])","metadata":{},"execution_count":33,"outputs":[{"name":"stdout","output_type":"stream","text":"Question: <sos> i believe so <eos>\n\nPredicted answer: good i hope it does not cool off this weekend <eos> \n"}]},{"cell_type":"code","source":"ask(questions[50])","metadata":{},"execution_count":34,"outputs":[{"name":"stdout","output_type":"stream","text":"Question: <sos> i wish it would cool off one day <eos>\n\nPredicted answer: that is how i feel i want winter to come soon <eos> \n"}]},{"cell_type":"code","source":"print(answers[50])","metadata":{},"execution_count":35,"outputs":[{"name":"stdout","output_type":"stream","text":"that's how i feel, i want winter to come soon.\n\n\n"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}